global_props:
  rand_seed: 4

logging:
  # file: logs/log
  dir: logs
  level: info

dump:
  user: pavel
  title: evo_srch_lorenz

models:
  lorenz:
    n: 16000
    ro: 28
    dt: 0.0002
    rand_seed: 4

schemes:
  hyper_param:
    evaluate:
      model: lorenz
      data: model # model or yaml filename with values
      metric: mse
      # max_steps: 1000
    esn:
      n_reservoir: 600
      random_state: 1
      # spectral_radius: 0.95 # 0
      # sparsity: 0.001 # 1
      # lambda_r: 0.001 # 2
      # regulirization: l2 # 3
      in_activation: tanh
      out_activation: identity
      # use_bias: True # 4
      # use_additive_noise_when_forecasting: True # 5
    evo:
      rand_seed: 1
      max_gen_num: 1
      population_size: 50
      hall_of_fame: 5
      hromo_len: 6
      verbose: true

      fitness_weights: [ -1.0 ]

      limits:
        # spectral_radius
        - type: float
          min: 1.e-8
          max: 1.5
          mutate:
            method: polynomial_bounded
            args:
              - key: up
                val: 1.5
              - key: low
                val: 1.e-8
              - key: eta
                val: 15
          # logspace:
          #   n: 100
          #   power: 10
        # sparsity
        - type: float
          min: 1.e-4
          max: 1.
          mutate:
            method: polynomial_bounded
            args:
              - key: up
                val: 1.
              - key: low
                val: 1.e-4
              - key: eta
                val: 15
          # logspace:
          #   n: 100
          #   power: 10
        # lambda_r
        - type: float
          min: 1.e-8
          max: 1.
          mutate:
            method: polynomial_bounded
            args:
              - key: up
                val: 1.
              - key: low
                val: 1.e-8
              - key: eta
                val: 15
          # logspace:
          #   n: 100
          #   power: 10
        # regulirization
        - type: choice
          choice: ['noise', 'l2', null]
        # use_bias
        - type: bool
        # use_additive_noise_when_forecasting
        - type: bool

      select:
        method: selTournament
        args:
          - key: tournsize
            val: 2
      mate:
        method: cxTwoPoint
        # method: cxOnePoint
        probability: 0.8
      mutate:
        method: dynoMutGeneByLimit
        probability: 0.25

      metrics:
        - name: min
          func: min
          package: numpy
        - name: avg
          func: mean
          package: numpy

# grid:
#   verbose: true
#   scoring: valid_one # train, valid_one or valid_multi. Для valid_multi необходимо задать valid_multi_n > 1
#   valid_multi_n: 5
#   params_set:
#     lorenz:
#       # n_reservoir:
#       #   start: 200
#       #   stop: 800
#       #   num: 7
#       spectral_radius:
#         start: 0.2
#         stop: 1.2
#         num: 20
#       sparsity:
#         start: 0.001
#         stop: 0.5
#         num: 20
#       noise:
#         start: 0.00000001
#         stop: 0.001
#         num: 20
#       # lambda_r:
#       #   start: 0.000001
#       #   stop: 0.1
#       #   num: 10
