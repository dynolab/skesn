global_props:
  rand_seed: 5

logging:
  # file: logs/log
  dir: logs
  level: info

dump:
  user: pavel
  title: evo_srch_moehlis

models:
  lorenz:
    rand_seed: 22
    dt: 0.001
    ro: 80
  chui_moffatt:
    rand_seed: 19
    dt: 0.001
    alpha: 1.5
    omega: 1
    eta: 4
    kappa: 4
    xi: 40 # [2;40] ?
  moehlis:
    rand_seed: 2
    dt: 0.001
    re: 500
    lx_pi: 1.75
    lz_pi: 1.2

schemes:
  hyper_param:
    evaluate:
      n: 55000
      split_n: 50000
      # fit_step: 10
      normalize: true
      model: moehlis # chui_moffatt
      # model: chui_moffatt
      # data: model # model or yaml filename with values
      metric: mse
      # max_steps: 2000
    esn:
      n_reservoir: 600
      random_state: 2
      # spectral_radius: 0.95 # 0
      # sparsity: 0.001 # 1
      # lambda_r: 0.001 # 2
      # regulirization: l2 # 3
      in_activation: tanh
      out_activation: identity
      # use_bias: True # 4
      # use_additive_noise_when_forecasting: True # 5
    evo:
      dump_dir: dumps
      rand_seed: 2
      max_gen_num: 30
      population_size: 50
      hall_of_fame: 3
      hromo_len: 6
      verbose: true

      fitness_weights: [ -1.0 ]

      select:
        method: selTournament
        args:
          - key: tournsize
            val: 2
      mate:
        method: dynoCxGeneByLimit
        probability: 0.8
      mutate:
        method: dynoMutGeneByLimit
        probability: 0.2
        indpb: 0.25
      limits:
        # spectral_radius
        - type: float
          min: 1.e-12
          max: 1.5
          mate:
            method: cxGaussianBoundedGene
            args:
              - key: up
                val: 1.5
              - key: low
                val: 1.e-12
              - key: eta
                val: 10
          mutate:
            method: polynomial_bounded
            args:
              - key: up
                val: 1.5
              - key: low
                val: 1.e-12
              - key: eta
                val: 10
        # sparsity
        - type: float
          min: 1.e-8
          max: 1.
          mate:
            method: cxGaussianBoundedGene
            args:
              - key: up
                val: 1.
              - key: low
                val: 1.e-8
              - key: eta
                val: 10
          mutate:
            method: polynomial_bounded
            args:
              - key: up
                val: 1.
              - key: low
                val: 1.e-8
              - key: eta
                val: 10
        # lambda_r
        - type: float
          min: 1.e-12
          max: 1.
          mate:
            method: cxGaussianBoundedGene
            args:
              - key: up
                val: 1.
              - key: low
                val: 1.e-12
              - key: eta
                val: 10
          mutate:
            method: polynomial_bounded
            args:
              - key: up
                val: 1.
              - key: low
                val: 1.e-12
              - key: eta
                val: 10
        # regulirization
        - type: choice
          choice: ['noise', 'l2', null]
          mate:
            method: cxRandChoiceGene
        # use_bias
        - type: bool
          mate:
            method: cxRandChoiceGene
        # use_additive_noise_when_forecasting
        - type: bool
          mate:
            method: cxRandChoiceGene

      metrics:
        - name: max
          func: max
          package: numpy
        - name: avg
          func: mean
          package: numpy

  hyper_param_multi_pop:
    evaluate:
      n: 55000
      split_n: 50000
      # fit_step: 10
      normalize: true
      model: moehlis # chui_moffatt
      # model: chui_moffatt
      # data: model # model or yaml filename with values
      metric: mse
      # max_steps: 2000
    esn:
      n_reservoir: 600
      random_state: 2
      # spectral_radius: 0.95 # 0
      # sparsity: 0.001 # 1
      # lambda_r: 0.001 # 2
      # regulirization: l2 # 3
      in_activation: tanh
      out_activation: identity
      # use_bias: True # 4
      # use_additive_noise_when_forecasting: True # 5
    evo:
      dump_dir: dumps
      rand_seed: 3
      max_gen_num: 100

      hromo_len: 6
      fitness_weights: [ -1.0 ]

      verbose: true

      populations:
        - size: 32
          hall_of_fame: 3
          select:
            method: selTournament
            args:
              - key: tournsize
                val: 2
          mate:
            method: dynoCxGeneByLimit
            probability: 0.8
          mutate:
            method: dynoMutGeneByLimit
            probability: 0.2
            indpb: 0.5
          limits:
            # spectral_radius
            - type: float
              min: 1.e-12
              max: 1.5
              mate:
                method: cxGaussianBoundedGene
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 20
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 20
            # sparsity
            - type: float
              min: 1.e-4
              max: 1.
              mate:
                method: cxGaussianBoundedGene
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 20
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 20
            # lambda_r
            - type: float
              min: 1.e-12
              max: 1.
              mate:
                method: cxGaussianBoundedGene
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 20
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 20
            # regulirization
            - type: choice
              choice: ['noise', 'l2', null]
              mate:
                method: cxRandChoiceGene
            # use_bias
            - type: bool
              mate:
                method: cxRandChoiceGene
            # use_additive_noise_when_forecasting
            - type: bool
              mate:
                method: cxRandChoiceGene

        - size: 32
          hall_of_fame: 3
          select:
            method: selTournament
            args:
              - key: tournsize
                val: 2
          mate:
            method: dynoCxGeneByLimit
            probability: 0.8
          mutate:
            method: dynoMutGeneByLimit
            probability: 0.2
            indpb: 0.5
          limits:
            # spectral_radius
            - type: float
              min: 1.e-12
              max: 1.5
              mate:
                method: cxGaussianBoundedGene
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 15
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 15
            # sparsity
            - type: float
              min: 1.e-8
              max: 1.
              mate:
                method: cxGaussianBoundedGene
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 15
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 15
            # lambda_r
            - type: float
              min: 1.e-12
              max: 1.
              mate:
                method: cxGaussianBoundedGene
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 15
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 15
            # regulirization
            - type: choice
              choice: ['noise', 'l2', null]
              mate:
                method: cxRandChoiceGene
            # use_bias
            - type: bool
              mate:
                method: cxRandChoiceGene
            # use_additive_noise_when_forecasting
            - type: bool
              mate:
                method: cxRandChoiceGene

        - size: 32
          hall_of_fame: 3
          select:
            method: selTournament
            args:
              - key: tournsize
                val: 2
          mate:
            method: dynoCxGeneByLimit
            probability: 0.8
          mutate:
            method: dynoMutGeneByLimit
            probability: 0.2
            indpb: 0.5
          limits:
            # spectral_radius
            - type: float
              min: 1.e-12
              max: 1.5
              mate:
                method: cxGaussianBoundedGene
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 10
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 10
            # sparsity
            - type: float
              min: 1.e-8
              max: 1.
              mate:
                method: cxGaussianBoundedGene
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 10
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 10
            # lambda_r
            - type: float
              min: 1.e-12
              max: 1.
              mate:
                method: cxGaussianBoundedGene
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 10
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 10
            # regulirization
            - type: choice
              choice: ['noise', 'l2', null]
              mate:
                method: cxRandChoiceGene
            # use_bias
            - type: bool
              mate:
                method: cxRandChoiceGene
            # use_additive_noise_when_forecasting
            - type: bool
              mate:
                method: cxRandChoiceGene

        - size: 32
          hall_of_fame: 3
          select:
            method: selTournament
            args:
              - key: tournsize
                val: 2
          mate:
            method: dynoCxGeneByLimit
            probability: 0.8
          mutate:
            method: dynoMutGeneByLimit
            probability: 0.2
            indpb: 0.5
          limits:
            # spectral_radius
            - type: float
              min: 1.e-12
              max: 1.5
              mate:
                method: cxGaussianBoundedGene # cxSimulatedBinaryBoundedGene
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 5
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 5
            # sparsity
            - type: float
              min: 1.e-8
              max: 1.
              mate:
                method: cxGaussianBoundedGene # cxSimulatedBinaryBoundedGene
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 5
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 5
            # lambda_r
            - type: float
              min: 1.e-12
              max: 1.
              mate:
                method: cxGaussianBoundedGene # cxSimulatedBinaryBoundedGene
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 5
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 5
            # regulirization
            - type: choice
              choice: ['noise', 'l2', null]
              mate:
                method: cxRandChoiceGene
            # use_bias
            - type: bool
              mate:
                method: cxRandChoiceGene
            # use_additive_noise_when_forecasting
            - type: bool
              mate:
                method: cxRandChoiceGene

      metrics:
        - name: max
          func: max
          package: numpy
        - name: avg
          func: mean
          package: numpy

  hyper_param_with_reservoir_multi_pop:
    evaluate:
      n: 55000
      split_n: 50000
      # fit_step: 10
      # normalize: true
      model: moehlis # chui_moffatt
      # model: chui_moffatt
      # data: model # model or yaml filename with values
      metric: mse
      # max_steps: 2000
    esn:
      n_reservoir: 600
      # random_state: 2
      # spectral_radius: 0.95 # 0
      # sparsity: 0.001 # 1
      # lambda_r: 0.001 # 2
      # regulirization: l2 # 3
      in_activation: tanh
      out_activation: identity
      # use_bias: True # 4
      # use_additive_noise_when_forecasting: True # 5
    evo:
      dump_dir: dumps
      rand_seed: 3
      max_gen_num: 15

      hromo_len: 7
      fitness_weights: [ -1.0 ]

      verbose: true

      populations:
        - size: 32
          hall_of_fame: 3
          select:
            method: selTournament
            args:
              - key: tournsize
                val: 2
          mate:
            method: dynoCxGeneByLimit
            probability: 0.8
          mutate:
            method: dynoMutGeneByLimit
            probability: 0.2
            indpb: 0.5
          limits:
            # spectral_radius
            - type: float
              min: 1.e-12
              max: 1.5
              mate:
                method: cxGaussianBoundedGene
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 20
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 20
            # sparsity
            - type: float
              min: 1.e-4
              max: 1.
              mate:
                method: cxGaussianBoundedGene
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 20
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 20
            # lambda_r
            - type: float
              min: 1.e-12
              max: 1.
              mate:
                method: cxGaussianBoundedGene
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 20
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 20
            # regulirization
            - type: choice
              choice: ['noise', 'l2', null]
              mate:
                method: cxRandChoiceGene
            # use_bias
            - type: bool
              mate:
                method: cxRandChoiceGene
            # use_additive_noise_when_forecasting
            - type: bool
              mate:
                method: cxRandChoiceGene
            # rand_seed
            - type: int
              min: 0
              max: 4096
              mate:
                method: cxRandChoiceGene
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 4096
                  - key: low
                    val: 0
                  - key: eta
                    val: 20

        - size: 32
          hall_of_fame: 3
          select:
            method: selTournament
            args:
              - key: tournsize
                val: 2
          mate:
            method: dynoCxGeneByLimit
            probability: 0.8
          mutate:
            method: dynoMutGeneByLimit
            probability: 0.2
            indpb: 0.5
          limits:
            # spectral_radius
            - type: float
              min: 1.e-12
              max: 1.5
              mate:
                method: cxGaussianBoundedGene
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 15
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 15
            # sparsity
            - type: float
              min: 1.e-8
              max: 1.
              mate:
                method: cxGaussianBoundedGene
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 15
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 15
            # lambda_r
            - type: float
              min: 1.e-12
              max: 1.
              mate:
                method: cxGaussianBoundedGene
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 15
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 15
            # regulirization
            - type: choice
              choice: ['noise', 'l2', null]
              mate:
                method: cxRandChoiceGene
            # use_bias
            - type: bool
              mate:
                method: cxRandChoiceGene
            # use_additive_noise_when_forecasting
            - type: bool
              mate:
                method: cxRandChoiceGene
            # rand_seed
            - type: int
              min: 0
              max: 4096
              mate:
                method: cxRandChoiceGene
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 4096
                  - key: low
                    val: 0
                  - key: eta
                    val: 15

        - size: 32
          hall_of_fame: 3
          select:
            method: selTournament
            args:
              - key: tournsize
                val: 2
          mate:
            method: dynoCxGeneByLimit
            probability: 0.8
          mutate:
            method: dynoMutGeneByLimit
            probability: 0.2
            indpb: 0.5
          limits:
            # spectral_radius
            - type: float
              min: 1.e-12
              max: 1.5
              mate:
                method: cxGaussianBoundedGene
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 10
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 10
            # sparsity
            - type: float
              min: 1.e-8
              max: 1.
              mate:
                method: cxGaussianBoundedGene
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 10
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 10
            # lambda_r
            - type: float
              min: 1.e-12
              max: 1.
              mate:
                method: cxGaussianBoundedGene
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 10
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 10
            # regulirization
            - type: choice
              choice: ['noise', 'l2', null]
              mate:
                method: cxRandChoiceGene
            # use_bias
            - type: bool
              mate:
                method: cxRandChoiceGene
            # use_additive_noise_when_forecasting
            - type: bool
              mate:
                method: cxRandChoiceGene
            # rand_seed
            - type: int
              min: 0
              max: 4096
              mate:
                method: cxRandChoiceGene
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 4096
                  - key: low
                    val: 0
                  - key: eta
                    val: 10

        - size: 32
          hall_of_fame: 3
          select:
            method: selTournament
            args:
              - key: tournsize
                val: 2
          mate:
            method: dynoCxGeneByLimit
            probability: 0.8
          mutate:
            method: dynoMutGeneByLimit
            probability: 0.2
            indpb: 0.5
          limits:
            # spectral_radius
            - type: float
              min: 1.e-12
              max: 1.5
              mate:
                method: cxGaussianBoundedGene # cxSimulatedBinaryBoundedGene
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 5
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 5
            # sparsity
            - type: float
              min: 1.e-8
              max: 1.
              mate:
                method: cxGaussianBoundedGene # cxSimulatedBinaryBoundedGene
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 5
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 5
            # lambda_r
            - type: float
              min: 1.e-12
              max: 1.
              mate:
                method: cxGaussianBoundedGene # cxSimulatedBinaryBoundedGene
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 5
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-12
                  - key: eta
                    val: 5
            # regulirization
            - type: choice
              choice: ['noise', 'l2', null]
              mate:
                method: cxRandChoiceGene
            # use_bias
            - type: bool
              mate:
                method: cxRandChoiceGene
            # use_additive_noise_when_forecasting
            - type: bool
              mate:
                method: cxRandChoiceGene
            # rand_seed
            - type: int
              min: 0
              max: 4096
              mate:
                method: cxRandChoiceGene
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 4096
                  - key: low
                    val: 0
                  - key: eta
                    val: 5

      metrics:
        - name: max
          func: max
          package: numpy
        - name: avg
          func: mean
          package: numpy

  hyper_param_multi_pop_multi_crit:
    evaluate:
      n: 1
      split_n: 40000
      fit_step: 10
      model: lorenz
      normalize: true
      data: model # model or yaml filename with values
      metric: mse
      # max_steps: 2000
    esn:
      n_reservoir: 600
      random_state: 2
      # spectral_radius: 0.95 # 0
      # sparsity: 0.001 # 1
      # lambda_r: 0.001 # 2
      # regulirization: l2 # 3
      in_activation: tanh
      out_activation: identity
      # use_bias: True # 4
      # use_additive_noise_when_forecasting: True # 5
    evo:
      dump_dir: dumps
      rand_seed: 2
      max_gen_num: 3

      hromo_len: 6
      fitness_weights: [ -1.0, -1.0, -1.0, -1.0, -1.0, -1.0 ]

      verbose: true

      metrics:
        - name: max
          func: max
          package: numpy
        - name: avg
          func: mean
          package: numpy

      populations:
        - size: 10
          hall_of_fame: 2
          select:
            method: selTournament
            args:
              - key: tournsize
                val: 2
          mate:
            method: cxTwoPoint
            probability: 0.8
          mutate:
            method: dynoMutGeneByLimit
            probability: 0.25
            # indpb: 0.25
          limits:
            # spectral_radius
            - type: float
              min: 1.e-8
              max: 1.5
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 15
            # sparsity
            - type: float
              min: 1.e-4
              max: 1.
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-4
                  - key: eta
                    val: 15
            # lambda_r
            - type: float
              min: 1.e-8
              max: 1.
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 15
            # regulirization
            - type: choice
              choice: ['noise', 'l2', null]
            # use_bias
            - type: bool
            # use_additive_noise_when_forecasting
            - type: bool

        - size: 10
          hall_of_fame: 2
          select:
            method: selTournament
            args:
              - key: tournsize
                val: 2
          mate:
            method: cxOnePoint
            probability: 0.8
          mutate:
            method: dynoMutGeneByLimit
            probability: 0.25
            # indpb: 0.25
          limits:
            # spectral_radius
            - type: float
              min: 1.e-8
              max: 1.5
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 15
            # sparsity
            - type: float
              min: 1.e-4
              max: 1.
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-4
                  - key: eta
                    val: 15
            # lambda_r
            - type: float
              min: 1.e-8
              max: 1.
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 15
            # regulirization
            - type: choice
              choice: ['noise', 'l2', null]
            # use_bias
            - type: bool
            # use_additive_noise_when_forecasting
            - type: bool

        - size: 10
          hall_of_fame: 2
          select:
            method: selTournament
            args:
              - key: tournsize
                val: 2
          mate:
            method: cxTwoPoint
            probability: 0.8
          mutate:
            method: dynoMutGeneByLimit
            probability: 0.4
            # indpb: 0.25
          limits:
            # spectral_radius
            - type: float
              min: 1.e-8
              max: 1.5
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 10
            # sparsity
            - type: float
              min: 1.e-4
              max: 1.
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-4
                  - key: eta
                    val: 10
            # lambda_r
            - type: float
              min: 1.e-8
              max: 1.
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 10
            # regulirization
            - type: choice
              choice: ['noise', 'l2', null]
            # use_bias
            - type: bool
            # use_additive_noise_when_forecasting
            - type: bool

        - size: 10
          hall_of_fame: 2
          select:
            method: selTournament
            args:
              - key: tournsize
                val: 2
          mate:
            method: cxOnePoint
            probability: 0.8
          mutate:
            method: dynoMutGeneByLimit
            probability: 0.4
            # indpb: 0.25
          limits:
            # spectral_radius
            - type: float
              min: 1.e-8
              max: 1.5
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 10
            # sparsity
            - type: float
              min: 1.e-4
              max: 1.
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-4
                  - key: eta
                    val: 10
            # lambda_r
            - type: float
              min: 1.e-8
              max: 1.
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 10
            # regulirization
            - type: choice
              choice: ['noise', 'l2', null]
            # use_bias
            - type: bool
            # use_additive_noise_when_forecasting
            - type: bool

        - size: 10
          hall_of_fame: 2
          select:
            method: selTournament
            args:
              - key: tournsize
                val: 2
          mate:
            method: cxOnePoint
            probability: 0.8
          mutate:
            method: dynoMutGeneByLimit
            probability: 0.3
            # indpb: 0.25
          limits:
            # spectral_radius
            - type: float
              min: 1.e-8
              max: 1.5
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.5
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 20
            # sparsity
            - type: float
              min: 1.e-4
              max: 1.
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-4
                  - key: eta
                    val: 20
            # lambda_r
            - type: float
              min: 1.e-8
              max: 1.
              mutate:
                method: polynomial_bounded
                args:
                  - key: up
                    val: 1.
                  - key: low
                    val: 1.e-8
                  - key: eta
                    val: 20
            # regulirization
            - type: choice
              choice: ['noise', 'l2', null]
            # use_bias
            - type: bool
            # use_additive_noise_when_forecasting
            - type: bool
